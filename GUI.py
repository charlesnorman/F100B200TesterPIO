#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Apr 03, 2021 10:49:56 AM EDT  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import GUI_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    GUI_support.set_Tk_var()
    top = Toplevel1 (root)
    GUI_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    GUI_support.set_Tk_var()
    top = Toplevel1 (w)
    GUI_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("1000x811+498+131")
        top.minsize(148, 1)
        top.maxsize(5764, 2139)
        top.resizable(1,  1)
        top.title("F100B200 Tester")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.frameMain = tk.Frame(top)
        self.frameMain.place(relx=0.01, rely=0.012, relheight=0.979
                , relwidth=0.985)
        self.frameMain.configure(relief='groove')
        self.frameMain.configure(borderwidth="2")
        self.frameMain.configure(relief="groove")
        self.frameMain.configure(background="#c0c0c0")
        self.frameMain.configure(highlightbackground="#d9d9d9")
        self.frameMain.configure(highlightcolor="black")

        self.lblFrameBattery = tk.LabelFrame(self.frameMain)
        self.lblFrameBattery.place(relx=0.01, rely=0.013, relheight=0.466
                , relwidth=0.437)
        self.lblFrameBattery.configure(relief='groove')
        self.lblFrameBattery.configure(foreground="black")
        self.lblFrameBattery.configure(text='''Battery''')
        self.lblFrameBattery.configure(background="#d9d9d9")
        self.lblFrameBattery.configure(highlightbackground="#d9d9d9")
        self.lblFrameBattery.configure(highlightcolor="black")

        self.frmBattery = tk.Frame(self.lblFrameBattery)
        self.frmBattery.place(relx=0.026, rely=0.092, relheight=0.17
                , relwidth=0.456, bordermode='ignore')
        self.frmBattery.configure(relief='groove')
        self.frmBattery.configure(borderwidth="2")
        self.frmBattery.configure(relief="groove")
        self.frmBattery.configure(background="#d9d9d9")
        self.frmBattery.configure(highlightbackground="#d9d9d9")
        self.frmBattery.configure(highlightcolor="black")

        self.rbtn6Volt = tk.Radiobutton(self.frmBattery)
        self.rbtn6Volt.place(relx=0.056, rely=0.175, relheight=0.571
                , relwidth=0.367)
        self.rbtn6Volt.configure(activebackground="#ececec")
        self.rbtn6Volt.configure(activeforeground="#000000")
        self.rbtn6Volt.configure(background="#d9d9d9")
        self.rbtn6Volt.configure(command=GUI_support.battery_type_change)
        self.rbtn6Volt.configure(disabledforeground="#a3a3a3")
        self.rbtn6Volt.configure(foreground="#000000")
        self.rbtn6Volt.configure(highlightbackground="#d9d9d9")
        self.rbtn6Volt.configure(highlightcolor="black")
        self.rbtn6Volt.configure(justify='left')
        self.rbtn6Volt.configure(text='''6 Volt''')
        self.rbtn6Volt.configure(value="1")
        self.rbtn6Volt.configure(variable=GUI_support.battery_6V)

        self.rbtn12Volt = tk.Radiobutton(self.frmBattery)
        self.rbtn12Volt.place(relx=0.597, rely=0.175, relheight=0.571
                , relwidth=0.367)
        self.rbtn12Volt.configure(activebackground="#ececec")
        self.rbtn12Volt.configure(activeforeground="#000000")
        self.rbtn12Volt.configure(background="#d9d9d9")
        self.rbtn12Volt.configure(command=GUI_support.battery_type_change)
        self.rbtn12Volt.configure(disabledforeground="#a3a3a3")
        self.rbtn12Volt.configure(foreground="#000000")
        self.rbtn12Volt.configure(highlightbackground="#d9d9d9")
        self.rbtn12Volt.configure(highlightcolor="black")
        self.rbtn12Volt.configure(justify='left')
        self.rbtn12Volt.configure(text='''12 Volt''')
        self.rbtn12Volt.configure(value="0")
        self.rbtn12Volt.configure(variable=GUI_support.battery_6V)

        self.frmInternalExternal = tk.Frame(self.lblFrameBattery)
        self.frmInternalExternal.place(relx=0.493, rely=0.092, relheight=0.17
                , relwidth=0.479, bordermode='ignore')
        self.frmInternalExternal.configure(relief='groove')
        self.frmInternalExternal.configure(borderwidth="2")
        self.frmInternalExternal.configure(relief="groove")
        self.frmInternalExternal.configure(background="#d9d9d9")
        self.frmInternalExternal.configure(highlightbackground="#d9d9d9")
        self.frmInternalExternal.configure(highlightcolor="black")

        self.rbtnInternal = tk.Radiobutton(self.frmInternalExternal)
        self.rbtnInternal.place(relx=0.053, rely=0.175, relheight=0.571
                , relwidth=0.345)
        self.rbtnInternal.configure(activebackground="#ececec")
        self.rbtnInternal.configure(activeforeground="#000000")
        self.rbtnInternal.configure(background="#d9d9d9")
        self.rbtnInternal.configure(command=GUI_support.internal_external_battery)
        self.rbtnInternal.configure(disabledforeground="#a3a3a3")
        self.rbtnInternal.configure(foreground="#000000")
        self.rbtnInternal.configure(highlightbackground="#d9d9d9")
        self.rbtnInternal.configure(highlightcolor="black")
        self.rbtnInternal.configure(justify='left')
        self.rbtnInternal.configure(text='''Internal''')
        self.rbtnInternal.configure(value="1")
        self.rbtnInternal.configure(variable=GUI_support.internal)
        self.tooltip_font = "TkDefaultFont"
        self.rbtnInternal_tooltip = \
        ToolTip(self.rbtnInternal, self.tooltip_font, '''Change to Battery Simulator''')

        self.rbtnExternal = tk.Radiobutton(self.frmInternalExternal)
        self.rbtnExternal.place(relx=0.515, rely=0.175, relheight=0.571
                , relwidth=0.398)
        self.rbtnExternal.configure(activebackground="#ececec")
        self.rbtnExternal.configure(activeforeground="#000000")
        self.rbtnExternal.configure(background="#d9d9d9")
        self.rbtnExternal.configure(command=GUI_support.internal_external_battery)
        self.rbtnExternal.configure(disabledforeground="#a3a3a3")
        self.rbtnExternal.configure(foreground="#000000")
        self.rbtnExternal.configure(highlightbackground="#d9d9d9")
        self.rbtnExternal.configure(highlightcolor="black")
        self.rbtnExternal.configure(justify='left')
        self.rbtnExternal.configure(text='''External''')
        self.rbtnExternal.configure(value="0")
        self.rbtnExternal.configure(variable=GUI_support.internal)
        self.tooltip_font = "TkDefaultFont"
        self.rbtnExternal_tooltip = \
        ToolTip(self.rbtnExternal, self.tooltip_font, '''Change to external Battery''')

        self.frameCurrent = tk.LabelFrame(self.lblFrameBattery)
        self.frameCurrent.place(relx=0.026, rely=0.278, relheight=0.17
                , relwidth=0.935, bordermode='ignore')
        self.frameCurrent.configure(relief='groove')
        self.frameCurrent.configure(foreground="black")
        self.frameCurrent.configure(text='''Current''')
        self.frameCurrent.configure(background="#d9d9d9")
        self.frameCurrent.configure(highlightbackground="#d9d9d9")
        self.frameCurrent.configure(highlightcolor="black")

        self.sbxCurrent = tk.Spinbox(self.frameCurrent, from_=0.0, to=1500.0)
        self.sbxCurrent.place(relx=0.224, rely=0.317, relheight=0.429
                , relwidth=0.199, bordermode='ignore')
        self.sbxCurrent.configure(activebackground="#f9f9f9")
        self.sbxCurrent.configure(background="white")
        self.sbxCurrent.configure(buttonbackground="#d9d9d9")
        self.sbxCurrent.configure(command=GUI_support.current_change)
        self.sbxCurrent.configure(disabledforeground="#a3a3a3")
        self.sbxCurrent.configure(font="TkDefaultFont")
        self.sbxCurrent.configure(foreground="black")
        self.sbxCurrent.configure(highlightbackground="black")
        self.sbxCurrent.configure(highlightcolor="black")
        self.sbxCurrent.configure(increment="100.0")
        self.sbxCurrent.configure(insertbackground="black")
        self.sbxCurrent.configure(selectbackground="blue")
        self.sbxCurrent.configure(selectforeground="white")
        self.sbxCurrent.configure(textvariable=GUI_support.battery_target_current)

        self.lblCurrentTarget = tk.Label(self.frameCurrent)
        self.lblCurrentTarget.place(relx=0.052, rely=0.365, height=30, width=66
                , bordermode='ignore')
        self.lblCurrentTarget.configure(activebackground="#f9f9f9")
        self.lblCurrentTarget.configure(activeforeground="black")
        self.lblCurrentTarget.configure(anchor='w')
        self.lblCurrentTarget.configure(background="#d9d9d9")
        self.lblCurrentTarget.configure(disabledforeground="#a3a3a3")
        self.lblCurrentTarget.configure(foreground="#000000")
        self.lblCurrentTarget.configure(highlightbackground="#d9d9d9")
        self.lblCurrentTarget.configure(highlightcolor="black")
        self.lblCurrentTarget.configure(justify='left')
        self.lblCurrentTarget.configure(text='''Target''')

        self.lblActualCurrent = tk.Label(self.frameCurrent)
        self.lblActualCurrent.place(relx=0.525, rely=0.365, height=30, width=66
                , bordermode='ignore')
        self.lblActualCurrent.configure(activebackground="#f9f9f9")
        self.lblActualCurrent.configure(activeforeground="black")
        self.lblActualCurrent.configure(anchor='w')
        self.lblActualCurrent.configure(background="#d9d9d9")
        self.lblActualCurrent.configure(disabledforeground="#a3a3a3")
        self.lblActualCurrent.configure(foreground="#000000")
        self.lblActualCurrent.configure(highlightbackground="#d9d9d9")
        self.lblActualCurrent.configure(highlightcolor="black")
        self.lblActualCurrent.configure(text='''Actual''')

        self.lblActualCurrentValue = tk.Label(self.frameCurrent)
        self.lblActualCurrentValue.place(relx=0.684, rely=0.365, height=30
                , width=97, bordermode='ignore')
        self.lblActualCurrentValue.configure(activebackground="#f9f9f9")
        self.lblActualCurrentValue.configure(activeforeground="black")
        self.lblActualCurrentValue.configure(background="#d9d9d9")
        self.lblActualCurrentValue.configure(disabledforeground="#a3a3a3")
        self.lblActualCurrentValue.configure(foreground="#000000")
        self.lblActualCurrentValue.configure(highlightbackground="#d9d9d9")
        self.lblActualCurrentValue.configure(highlightcolor="black")
        self.lblActualCurrentValue.configure(relief="sunken")
        self.lblActualCurrentValue.configure(textvariable=GUI_support.battery_actual_current)

        self.frmVoltage = tk.LabelFrame(self.lblFrameBattery)
        self.frmVoltage.place(relx=0.026, rely=0.486, relheight=0.168
                , relwidth=0.935, bordermode='ignore')
        self.frmVoltage.configure(relief='groove')
        self.frmVoltage.configure(foreground="black")
        self.frmVoltage.configure(text='''Voltage''')
        self.frmVoltage.configure(background="#d9d9d9")
        self.frmVoltage.configure(highlightbackground="#d9d9d9")
        self.frmVoltage.configure(highlightcolor="black")

        self.lblTargetVoltage = tk.Label(self.frmVoltage)
        self.lblTargetVoltage.place(relx=0.052, rely=0.371, height=29, width=45
                , bordermode='ignore')
        self.lblTargetVoltage.configure(activebackground="#f9f9f9")
        self.lblTargetVoltage.configure(activeforeground="black")
        self.lblTargetVoltage.configure(background="#d9d9d9")
        self.lblTargetVoltage.configure(disabledforeground="#a3a3a3")
        self.lblTargetVoltage.configure(foreground="#000000")
        self.lblTargetVoltage.configure(highlightbackground="#d9d9d9")
        self.lblTargetVoltage.configure(highlightcolor="black")
        self.lblTargetVoltage.configure(text='''Target''')

        self.lblActualVoltage = tk.Label(self.frmVoltage)
        self.lblActualVoltage.place(relx=0.525, rely=0.371, height=29, width=45
                , bordermode='ignore')
        self.lblActualVoltage.configure(activebackground="#f9f9f9")
        self.lblActualVoltage.configure(activeforeground="black")
        self.lblActualVoltage.configure(background="#d9d9d9")
        self.lblActualVoltage.configure(disabledforeground="#a3a3a3")
        self.lblActualVoltage.configure(foreground="#000000")
        self.lblActualVoltage.configure(highlightbackground="#d9d9d9")
        self.lblActualVoltage.configure(highlightcolor="black")
        self.lblActualVoltage.configure(text='''Actual''')

        self.sbxTargetVoltage = tk.Spinbox(self.frmVoltage, from_=0.0, to=15000.0)
        self.sbxTargetVoltage.place(relx=0.224, rely=0.371, relheight=0.435
                , relwidth=0.199, bordermode='ignore')
        self.sbxTargetVoltage.configure(activebackground="#f9f9f9")
        self.sbxTargetVoltage.configure(background="white")
        self.sbxTargetVoltage.configure(buttonbackground="#d9d9d9")
        self.sbxTargetVoltage.configure(command=GUI_support.voltage_change)
        self.sbxTargetVoltage.configure(disabledforeground="#a3a3a3")
        self.sbxTargetVoltage.configure(font="TkDefaultFont")
        self.sbxTargetVoltage.configure(foreground="black")
        self.sbxTargetVoltage.configure(highlightbackground="black")
        self.sbxTargetVoltage.configure(highlightcolor="black")
        self.sbxTargetVoltage.configure(increment="100.0")
        self.sbxTargetVoltage.configure(insertbackground="black")
        self.sbxTargetVoltage.configure(selectbackground="blue")
        self.sbxTargetVoltage.configure(selectforeground="white")
        self.sbxTargetVoltage.configure(textvariable=GUI_support.battery_target_voltage)

        self.lblAcualVoltageValue = tk.Label(self.frmVoltage)
        self.lblAcualVoltageValue.place(relx=0.684, rely=0.371, height=29
                , width=97, bordermode='ignore')
        self.lblAcualVoltageValue.configure(activebackground="#f9f9f9")
        self.lblAcualVoltageValue.configure(activeforeground="black")
        self.lblAcualVoltageValue.configure(anchor='w')
        self.lblAcualVoltageValue.configure(background="#d9d9d9")
        self.lblAcualVoltageValue.configure(disabledforeground="#a3a3a3")
        self.lblAcualVoltageValue.configure(foreground="#000000")
        self.lblAcualVoltageValue.configure(highlightbackground="#d9d9d9")
        self.lblAcualVoltageValue.configure(highlightcolor="black")
        self.lblAcualVoltageValue.configure(relief="sunken")
        self.lblAcualVoltageValue.configure(textvariable=GUI_support.battery_actual_voltage)

        self.Frame3 = tk.Frame(self.lblFrameBattery)
        self.Frame3.place(relx=0.026, rely=0.703, relheight=0.149, relwidth=0.937
                , bordermode='ignore')
        self.Frame3.configure(relief='groove')
        self.Frame3.configure(borderwidth="2")
        self.Frame3.configure(relief="groove")
        self.Frame3.configure(background="#d9d9d9")
        self.Frame3.configure(highlightbackground="#d9d9d9")
        self.Frame3.configure(highlightcolor="black")

        self.lblFrameCharger = tk.LabelFrame(self.frameMain)
        self.lblFrameCharger.place(relx=0.462, rely=0.013, relheight=0.466
                , relwidth=0.53)
        self.lblFrameCharger.configure(relief='groove')
        self.lblFrameCharger.configure(foreground="black")
        self.lblFrameCharger.configure(text='''Charger''')
        self.lblFrameCharger.configure(background="#d9d9d9")
        self.lblFrameCharger.configure(highlightbackground="#d9d9d9")
        self.lblFrameCharger.configure(highlightcolor="black")

        self.framePower = tk.LabelFrame(self.lblFrameCharger)
        self.framePower.place(relx=0.019, rely=0.054, relheight=0.203
                , relwidth=0.326, bordermode='ignore')
        self.framePower.configure(relief='groove')
        self.framePower.configure(foreground="black")
        self.framePower.configure(text='''Power''')
        self.framePower.configure(background="#d9d9d9")
        self.framePower.configure(highlightbackground="#d9d9d9")
        self.framePower.configure(highlightcolor="black")

        self.rbtnPowerOn = tk.Radiobutton(self.framePower)
        self.rbtnPowerOn.place(relx=0.118, rely=0.4, relheight=0.413
                , relwidth=0.359, bordermode='ignore')
        self.rbtnPowerOn.configure(activebackground="#ececec")
        self.rbtnPowerOn.configure(activeforeground="#000000")
        self.rbtnPowerOn.configure(background="#d9d9d9")
        self.rbtnPowerOn.configure(command=GUI_support.power_on)
        self.rbtnPowerOn.configure(disabledforeground="#a3a3a3")
        self.rbtnPowerOn.configure(foreground="#000000")
        self.rbtnPowerOn.configure(highlightbackground="#d9d9d9")
        self.rbtnPowerOn.configure(highlightcolor="black")
        self.rbtnPowerOn.configure(justify='left')
        self.rbtnPowerOn.configure(text='''On''')
        self.rbtnPowerOn.configure(value="1")
        self.rbtnPowerOn.configure(variable=GUI_support.on_selected)
        self.tooltip_font = "TkDefaultFont"
        self.rbtnPowerOn_tooltip = \
        ToolTip(self.rbtnPowerOn, self.tooltip_font, '''Select to turn power on''')

        self.rbtnPowerOff = tk.Radiobutton(self.framePower)
        self.rbtnPowerOff.place(relx=0.529, rely=0.4, relheight=0.413
                , relwidth=0.324, bordermode='ignore')
        self.rbtnPowerOff.configure(activebackground="#ececec")
        self.rbtnPowerOff.configure(activeforeground="#000000")
        self.rbtnPowerOff.configure(background="#d9d9d9")
        self.rbtnPowerOff.configure(command=GUI_support.power_on)
        self.rbtnPowerOff.configure(disabledforeground="#a3a3a3")
        self.rbtnPowerOff.configure(foreground="#000000")
        self.rbtnPowerOff.configure(highlightbackground="#d9d9d9")
        self.rbtnPowerOff.configure(highlightcolor="black")
        self.rbtnPowerOff.configure(justify='left')
        self.rbtnPowerOff.configure(text='''Off''')
        self.rbtnPowerOff.configure(value="0")
        self.rbtnPowerOff.configure(variable=GUI_support.on_selected)
        self.tooltip_font = "TkDefaultFont"
        self.rbtnPowerOff_tooltip = \
        ToolTip(self.rbtnPowerOff, self.tooltip_font, '''Select to turn power off''')

        self.frmStatus = tk.LabelFrame(self.lblFrameCharger)
        self.frmStatus.place(relx=0.364, rely=0.054, relheight=0.203
                , relwidth=0.594, bordermode='ignore')
        self.frmStatus.configure(relief='groove')
        self.frmStatus.configure(foreground="black")
        self.frmStatus.configure(text='''Status''')
        self.frmStatus.configure(background="#d9d9d9")
        self.frmStatus.configure(highlightbackground="#d9d9d9")
        self.frmStatus.configure(highlightcolor="black")

        self.lblStat1 = tk.Label(self.frmStatus)
        self.lblStat1.place(relx=0.161, rely=0.2, height=26, width=42
                , bordermode='ignore')
        self.lblStat1.configure(activebackground="#f9f9f9")
        self.lblStat1.configure(activeforeground="black")
        self.lblStat1.configure(background="#d9d9d9")
        self.lblStat1.configure(disabledforeground="#a3a3a3")
        self.lblStat1.configure(foreground="#000000")
        self.lblStat1.configure(highlightbackground="#d9d9d9")
        self.lblStat1.configure(highlightcolor="black")
        self.lblStat1.configure(justify='left')
        self.lblStat1.configure(text='''Stat1''')

        self.lblValueStat1 = tk.Label(self.frmStatus)
        self.lblValueStat1.place(relx=0.161, rely=0.533, height=26, width=42
                , bordermode='ignore')
        self.lblValueStat1.configure(activebackground="#f9f9f9")
        self.lblValueStat1.configure(activeforeground="black")
        self.lblValueStat1.configure(background="#d9d9d9")
        self.lblValueStat1.configure(disabledforeground="#a3a3a3")
        self.lblValueStat1.configure(foreground="#000000")
        self.lblValueStat1.configure(highlightbackground="#d9d9d9")
        self.lblValueStat1.configure(highlightcolor="black")
        self.lblValueStat1.configure(relief="sunken")
        self.lblValueStat1.configure(textvariable=GUI_support.stat_1)

        self.lblStat2 = tk.Label(self.frmStatus)
        self.lblStat2.place(relx=0.355, rely=0.2, height=26, width=42
                , bordermode='ignore')
        self.lblStat2.configure(activebackground="#f9f9f9")
        self.lblStat2.configure(activeforeground="black")
        self.lblStat2.configure(background="#d9d9d9")
        self.lblStat2.configure(disabledforeground="#a3a3a3")
        self.lblStat2.configure(foreground="#000000")
        self.lblStat2.configure(highlightbackground="#d9d9d9")
        self.lblStat2.configure(highlightcolor="black")
        self.lblStat2.configure(text='''Stat2''')

        self.lblStat2Value = tk.Label(self.frmStatus)
        self.lblStat2Value.place(relx=0.355, rely=0.533, height=26, width=42
                , bordermode='ignore')
        self.lblStat2Value.configure(activebackground="#f9f9f9")
        self.lblStat2Value.configure(activeforeground="black")
        self.lblStat2Value.configure(background="#d9d9d9")
        self.lblStat2Value.configure(disabledforeground="#a3a3a3")
        self.lblStat2Value.configure(foreground="#000000")
        self.lblStat2Value.configure(highlightbackground="#d9d9d9")
        self.lblStat2Value.configure(highlightcolor="black")
        self.lblStat2Value.configure(relief="sunken")
        self.lblStat2Value.configure(textvariable=GUI_support.stat_2)

        self.lblPowerOn = tk.Label(self.frmStatus)
        self.lblPowerOn.place(relx=0.532, rely=0.2, height=26, width=52
                , bordermode='ignore')
        self.lblPowerOn.configure(activebackground="#f9f9f9")
        self.lblPowerOn.configure(activeforeground="black")
        self.lblPowerOn.configure(background="#d9d9d9")
        self.lblPowerOn.configure(disabledforeground="#a3a3a3")
        self.lblPowerOn.configure(foreground="#000000")
        self.lblPowerOn.configure(highlightbackground="#d9d9d9")
        self.lblPowerOn.configure(highlightcolor="black")
        self.lblPowerOn.configure(text='''On/Off''')

        self.lblPowerOnValue = tk.Label(self.frmStatus)
        self.lblPowerOnValue.place(relx=0.548, rely=0.533, height=26, width=42
                , bordermode='ignore')
        self.lblPowerOnValue.configure(activebackground="#f9f9f9")
        self.lblPowerOnValue.configure(activeforeground="black")
        self.lblPowerOnValue.configure(background="#d9d9d9")
        self.lblPowerOnValue.configure(disabledforeground="#a3a3a3")
        self.lblPowerOnValue.configure(foreground="#000000")
        self.lblPowerOnValue.configure(highlightbackground="#d9d9d9")
        self.lblPowerOnValue.configure(highlightcolor="black")
        self.lblPowerOnValue.configure(relief="sunken")
        self.lblPowerOnValue.configure(text='''0''')
        self.lblPowerOnValue.configure(textvariable=GUI_support.power_on_not)

        self.lblLoad = tk.Label(self.frmStatus)
        self.lblLoad.place(relx=0.742, rely=0.2, height=26, width=42
                , bordermode='ignore')
        self.lblLoad.configure(activebackground="#f9f9f9")
        self.lblLoad.configure(activeforeground="black")
        self.lblLoad.configure(background="#d9d9d9")
        self.lblLoad.configure(disabledforeground="#a3a3a3")
        self.lblLoad.configure(foreground="#000000")
        self.lblLoad.configure(highlightbackground="#d9d9d9")
        self.lblLoad.configure(highlightcolor="black")
        self.lblLoad.configure(text='''Load''')

        self.lblLoadValue = tk.Label(self.frmStatus)
        self.lblLoadValue.place(relx=0.742, rely=0.533, height=26, width=42
                , bordermode='ignore')
        self.lblLoadValue.configure(activebackground="#f9f9f9")
        self.lblLoadValue.configure(activeforeground="black")
        self.lblLoadValue.configure(background="#d9d9d9")
        self.lblLoadValue.configure(disabledforeground="#a3a3a3")
        self.lblLoadValue.configure(foreground="#000000")
        self.lblLoadValue.configure(highlightbackground="#d9d9d9")
        self.lblLoadValue.configure(highlightcolor="black")
        self.lblLoadValue.configure(relief="sunken")
        self.lblLoadValue.configure(text='''0''')
        self.lblLoadValue.configure(textvariable=GUI_support.plus_load)

        self.frmOven = tk.LabelFrame(self.frameMain)
        self.frmOven.place(relx=0.01, rely=0.491, relheight=0.157
                , relwidth=0.437)
        self.frmOven.configure(relief='groove')
        self.frmOven.configure(foreground="black")
        self.frmOven.configure(text='''Oven''')
        self.frmOven.configure(background="#d9d9d9")
        self.frmOven.configure(highlightbackground="#d9d9d9")
        self.frmOven.configure(highlightcolor="black")

        self.frmOvenPower = tk.Frame(self.frmOven)
        self.frmOvenPower.place(relx=0.019, rely=0.2, relheight=0.352
                , relwidth=0.309, bordermode='ignore')
        self.frmOvenPower.configure(relief='groove')
        self.frmOvenPower.configure(borderwidth="2")
        self.frmOvenPower.configure(relief="groove")
        self.frmOvenPower.configure(background="#d9d9d9")
        self.frmOvenPower.configure(highlightbackground="#d9d9d9")
        self.frmOvenPower.configure(highlightcolor="black")

        self.rbtnOvenOn = tk.Radiobutton(self.frmOvenPower)
        self.rbtnOvenOn.place(relx=0.075, rely=0.227, relheight=0.591
                , relwidth=0.421)
        self.rbtnOvenOn.configure(activebackground="#ececec")
        self.rbtnOvenOn.configure(activeforeground="#000000")
        self.rbtnOvenOn.configure(background="#d9d9d9")
        self.rbtnOvenOn.configure(command=GUI_support.oven_on)
        self.rbtnOvenOn.configure(disabledforeground="#a3a3a3")
        self.rbtnOvenOn.configure(foreground="#000000")
        self.rbtnOvenOn.configure(highlightbackground="#d9d9d9")
        self.rbtnOvenOn.configure(highlightcolor="black")
        self.rbtnOvenOn.configure(justify='left')
        self.rbtnOvenOn.configure(text='''On''')
        self.rbtnOvenOn.configure(value="1")
        self.rbtnOvenOn.configure(variable=GUI_support.oven_on)

        self.rbtnOvenOff = tk.Radiobutton(self.frmOvenPower)
        self.rbtnOvenOff.place(relx=0.444, rely=0.227, relheight=0.591
                , relwidth=0.414)
        self.rbtnOvenOff.configure(activebackground="#ececec")
        self.rbtnOvenOff.configure(activeforeground="#000000")
        self.rbtnOvenOff.configure(background="#d9d9d9")
        self.rbtnOvenOff.configure(command=GUI_support.oven_on)
        self.rbtnOvenOff.configure(disabledforeground="#a3a3a3")
        self.rbtnOvenOff.configure(foreground="#000000")
        self.rbtnOvenOff.configure(highlightbackground="#d9d9d9")
        self.rbtnOvenOff.configure(highlightcolor="black")
        self.rbtnOvenOff.configure(justify='left')
        self.rbtnOvenOff.configure(text='''Off''')
        self.rbtnOvenOff.configure(value="0")
        self.rbtnOvenOff.configure(variable=GUI_support.oven_on)

        self.frmHeatCool = tk.Frame(self.frmOven)
        self.frmHeatCool.place(relx=0.372, rely=0.2, relheight=0.352
                , relwidth=0.333, bordermode='ignore')
        self.frmHeatCool.configure(relief='groove')
        self.frmHeatCool.configure(borderwidth="2")
        self.frmHeatCool.configure(relief="groove")
        self.frmHeatCool.configure(background="#d9d9d9")
        self.frmHeatCool.configure(highlightbackground="#d9d9d9")
        self.frmHeatCool.configure(highlightcolor="black")

        self.rbtnHeat = tk.Radiobutton(self.frmHeatCool)
        self.rbtnHeat.place(relx=0.007, rely=0.227, relheight=0.705
                , relwidth=0.413)
        self.rbtnHeat.configure(activebackground="#ececec")
        self.rbtnHeat.configure(activeforeground="#000000")
        self.rbtnHeat.configure(background="#d9d9d9")
        self.rbtnHeat.configure(command=GUI_support.cool_on)
        self.rbtnHeat.configure(disabledforeground="#a3a3a3")
        self.rbtnHeat.configure(foreground="#000000")
        self.rbtnHeat.configure(highlightbackground="#d9d9d9")
        self.rbtnHeat.configure(highlightcolor="black")
        self.rbtnHeat.configure(justify='left')
        self.rbtnHeat.configure(text='''Heat''')
        self.rbtnHeat.configure(value="0")
        self.rbtnHeat.configure(variable=GUI_support.cool)

        self.rbtnCool = tk.Radiobutton(self.frmHeatCool)
        self.rbtnCool.place(relx=0.406, rely=0.227, relheight=0.705
                , relwidth=0.552)
        self.rbtnCool.configure(activebackground="#ececec")
        self.rbtnCool.configure(activeforeground="#000000")
        self.rbtnCool.configure(background="#d9d9d9")
        self.rbtnCool.configure(command=GUI_support.cool_on)
        self.rbtnCool.configure(disabledforeground="#a3a3a3")
        self.rbtnCool.configure(foreground="#000000")
        self.rbtnCool.configure(highlightbackground="#d9d9d9")
        self.rbtnCool.configure(highlightcolor="black")
        self.rbtnCool.configure(justify='left')
        self.rbtnCool.configure(text='''Cool''')
        self.rbtnCool.configure(value="1")
        self.rbtnCool.configure(variable=GUI_support.cool)

        self.lblOvenTemp = tk.Label(self.frmOven)
        self.lblOvenTemp.place(relx=0.023, rely=0.64, height=26, width=80
                , bordermode='ignore')
        self.lblOvenTemp.configure(activebackground="#f9f9f9")
        self.lblOvenTemp.configure(activeforeground="black")
        self.lblOvenTemp.configure(background="#d9d9d9")
        self.lblOvenTemp.configure(disabledforeground="#a3a3a3")
        self.lblOvenTemp.configure(foreground="#000000")
        self.lblOvenTemp.configure(highlightbackground="#d9d9d9")
        self.lblOvenTemp.configure(highlightcolor="black")
        self.lblOvenTemp.configure(text='''Oven Temp''')

        self.lblOvenTempValue = tk.Label(self.frmOven)
        self.lblOvenTempValue.place(relx=0.233, rely=0.64, height=26, width=80
                , bordermode='ignore')
        self.lblOvenTempValue.configure(activebackground="#f9f9f9")
        self.lblOvenTempValue.configure(activeforeground="black")
        self.lblOvenTempValue.configure(background="#d9d9d9")
        self.lblOvenTempValue.configure(disabledforeground="#a3a3a3")
        self.lblOvenTempValue.configure(foreground="#000000")
        self.lblOvenTempValue.configure(highlightbackground="#d9d9d9")
        self.lblOvenTempValue.configure(highlightcolor="black")
        self.lblOvenTempValue.configure(relief="sunken")
        self.lblOvenTempValue.configure(textvariable=GUI_support.oven_temperature)

        self.lblCompTempValue = tk.Label(self.frmOven)
        self.lblCompTempValue.place(relx=0.698, rely=0.64, height=26, width=80
                , bordermode='ignore')
        self.lblCompTempValue.configure(activebackground="#f9f9f9")
        self.lblCompTempValue.configure(activeforeground="black")
        self.lblCompTempValue.configure(background="#d9d9d9")
        self.lblCompTempValue.configure(disabledforeground="#a3a3a3")
        self.lblCompTempValue.configure(foreground="#000000")
        self.lblCompTempValue.configure(highlightbackground="#d9d9d9")
        self.lblCompTempValue.configure(highlightcolor="black")
        self.lblCompTempValue.configure(relief="sunken")
        self.lblCompTempValue.configure(textvariable=GUI_support.comp_temperature)

        self.lblCompTemp = tk.Label(self.frmOven)
        self.lblCompTemp.place(relx=0.488, rely=0.64, height=26, width=80
                , bordermode='ignore')
        self.lblCompTemp.configure(activebackground="#f9f9f9")
        self.lblCompTemp.configure(activeforeground="black")
        self.lblCompTemp.configure(background="#d9d9d9")
        self.lblCompTemp.configure(disabledforeground="#a3a3a3")
        self.lblCompTemp.configure(foreground="#000000")
        self.lblCompTemp.configure(highlightbackground="#d9d9d9")
        self.lblCompTemp.configure(highlightcolor="black")
        self.lblCompTemp.configure(text='''Comp Temp''')

# ======================================================
# Support code for Balloon Help (also called tooltips).
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in milliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        """
        Updates the Tooltip with a new message. Added by Rozen
        """
        self.msgVar.set(msg)

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

if __name__ == '__main__':
    vp_start_gui()





